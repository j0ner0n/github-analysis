/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package githubnames

import com.beust.klaxon.Klaxon
import java.io.BufferedReader
import java.io.File
import java.net.HttpURLConnection
import java.net.URL

class App {
    val greeting: String
        get() {
            return "Hello world."
        }
}

const val GITHUB = "https://api.github.com"

fun main(args: Array<String>) {
    val token = getToken(args)
    //val response: String = makeRequest("$GITHUB/users","GET", token)
    val response = """{"login": "test", "language": "Java"}"""
    val result: User? = Klaxon().parse<User>(response)
    print(result)

    /* Doesn't work
    val gson = Gson()
    val user: User = gson.fromJson("""{"login": "test", "language": "Java"}""", User::class.java)
    print(user)
    */



    //println(response.contains("login"))
    //println(response)
}

fun getToken(args: Array<String>): String {
    val file = File(".github-oauth.token")
    return if (file.exists() && file.canRead() && file.readText() != "") {
        file.readText()
    } else if (args.size == 1) {
        args[0]
    } else
        throw RuntimeException("No token passed")
}

fun makeRequest(target: String, type: String, key: String, verbose: Boolean = false): String {
    val url = URL(target)

    with(url.openConnection() as HttpURLConnection) {
        requestMethod = type
        setRequestProperty("Authorization", "token: $key")

        if (responseCode != 200)
            throw RuntimeException("HTTP $requestMethod returned code $responseCode.")

        if (verbose) {
            println("\n$requestMethod: $url")
            println("Requests left: ${headerFields["X-RateLimit-Remaining"]}")
            //println("Entire Header: $headerFields")
        }

        return inputStream.bufferedReader().use(BufferedReader::readText)
    }
}
/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package githubnames

import com.beust.klaxon.Klaxon
import java.io.BufferedReader
import java.io.File
import java.net.HttpURLConnection
import java.net.URL

class App {
    val greeting: String
        get() {
            return "Hello world."
        }
}

const val GITHUB = "https://api.github.com"

fun main(args: Array<String>) {
    val token = getToken(args)
    var answer: String = makeRequest("GET", "/users", token, true)
    val users: List<User> = Klaxon().parseArray(answer) ?: throw RuntimeException("Could not fetch users")
    println(users)
    /* TODO add for final solution
    users.forEach {
        answer = makeRequest("GET", "/users/${it.login}/repos", token, false)
    }*/
    answer = makeRequest("GET", "/users/${users[0].login}/repos", token, false)
    println(answer)
}

fun getToken(args: Array<String>): String {
    val file = File(".github-oauth.token")
    return if (file.exists() && file.canRead() && file.readText() != "") {
        file.readText()
    } else if (args.size == 1) {
        args[0]
    } else
        throw RuntimeException("No token passed")
}

fun makeRequest(type: String, target: String, token: String, verbose: Boolean = false): String {
    val url = URL(GITHUB + target)

    with(url.openConnection() as HttpURLConnection) {
        requestMethod = type

        setRequestProperty("Authorization", "token $token")

        if (responseCode != 200)
            throw RuntimeException("HTTP $requestMethod returned code $responseCode.")

        if (verbose) {
            println("\n$requestMethod: $url")
            println("Requests left: ${headerFields["X-RateLimit-Remaining"]}")
            //println("Entire Header: $headerFields")
        }

        return inputStream.bufferedReader().use(BufferedReader::readText)
    }
}